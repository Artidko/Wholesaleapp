// lib/services/product_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/product.dart';

class ProductService {
  ProductService._();
  static final instance = ProductService._();

  final CollectionReference<Map<String, dynamic>> _col = FirebaseFirestore
      .instance
      .collection('products');

  /// ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô CatalogTab
  Stream<List<Product>> watch() => watchAll();

  /// ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
  Stream<List<Product>> watchAll() {
    return _col
        .orderBy('updatedAt', descending: true)
        .snapshots()
        .map(
          (s) => s.docs.map((d) => Product.fromMap(d.id, d.data())).toList(),
        );
  }

  /// ‡∏î‡∏π‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î:
  /// - ‡∏ñ‡πâ‡∏≤ category ‡∏ß‡πà‡∏≤‡∏á/‚Äú‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚Äù => ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° updatedAt (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ index ‡∏û‡∏¥‡πÄ‡∏®‡∏©)
  /// - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î => ‡∏ï‡∏±‡∏î orderBy ‡∏≠‡∏≠‡∏Å (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ needs index ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
  ///   *‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Composite Index ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î orderBy ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ*
  Stream<List<Product>> watchByCategory(String? category) {
    final filter =
        category != null && category.isNotEmpty && category != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';

    Query<Map<String, dynamic>> q = _col;
    if (filter) {
      q = q.where('category', isEqualTo: category);
      // ‚ùó ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà orderBy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î requirement index
      return q.snapshots().map(
        (s) => s.docs.map((d) => Product.fromMap(d.id, d.data())).toList(),
      );
    }

    // ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î => ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° updatedAt
    return _col
        .orderBy('updatedAt', descending: true)
        .snapshots()
        .map(
          (s) => s.docs.map((d) => Product.fromMap(d.id, d.data())).toList(),
        );
  }

  /// ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏µ‡∏ö‡∏±‡∏Å: ‡πÑ‡∏°‡πà orderBy + ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  Stream<List<Product>> watchDebug() {
    return _col.snapshots().map((s) {
      // ignore: avoid_print
      print('üì¶ products docs: ${s.docs.length}');
      return s.docs.map((d) => Product.fromMap(d.id, d.data())).toList();
    });
  }

  /// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ä‡∏∑‡πà‡∏≠/sku) + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î
  Stream<List<Product>> search({required String query, String? category}) {
    return watchByCategory(category).map((list) {
      final q = query.trim().toLowerCase();
      if (q.isEmpty) return list;
      return list
          .where(
            (p) =>
                p.name.toLowerCase().contains(q) ||
                (p.sku ?? '').toLowerCase().contains(q),
          )
          .toList();
    });
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
  Future<void> upsert(Product p, {bool useServerTime = true}) async {
    await _col
        .doc(p.id)
        .set(p.toMap(useServerTime: useServerTime), SetOptions(merge: true));
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ
  Future<void> updateImageUrl({
    required String productId,
    required String imageUrl,
  }) async {
    await _col.doc(productId).update({
      'imageUrl': imageUrl,
      'updatedAt': FieldValue.serverTimestamp(),
    });
  }

  /// ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  Future<void> delete(String productId) => _col.doc(productId).delete();

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏°‡∏µ category)
  Future<void> seedDemo() async {
    await _col.add({
      'name': '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      'price': 19.0,
      'imageUrl': 'https://picsum.photos/seed/demo/300/300',
      'sku': 'DEMO-001',
      'stock': 10,
      'category': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
      'updatedAt': FieldValue.serverTimestamp(),
    });
  }
}

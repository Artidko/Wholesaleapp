// lib/pages/user/tabs/orders_tab.dart
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';

import '../../shared/widgets.dart'; // ‡πÉ‡∏ä‡πâ OrderStatusChip
import '../../../services/order_service.dart';
import '../../../models/order.dart';
import '../../widgets/order_view_page.dart'; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏ß‡∏¢ orderId

// üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà OSM
import 'order_tracking_map_osm.dart';

class OrdersTab extends StatefulWidget {
  const OrdersTab({super.key});
  @override
  State<OrdersTab> createState() => _OrdersTabState();
}

class _OrdersTabState extends State<OrdersTab> {
  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå (‡∏°‡∏µ "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
  final filters = const [
    '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß',
    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
    '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
  ];
  String selected = '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';

  // TH -> enum (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö enum ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: pending, paid, preparing, delivering, completed, cancelled)
  final Map<String, OrderStatus> _thToStatus = const {
    '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß': OrderStatus.paid,
    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': OrderStatus.delivering,
    '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô': OrderStatus.completed,
    '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': OrderStatus.cancelled,
  };

  // flag: ‡∏ñ‡πâ‡∏≤ index ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏à‡∏∞ fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ stream ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà orderBy
  bool _fallbackNoOrder = false;

  // enum -> TH
  String _statusToTh(OrderStatus s) {
    switch (s) {
      case OrderStatus.pending:
        return '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
      case OrderStatus.paid:
        return '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß';
      case OrderStatus.preparing:
        return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
      case OrderStatus.delivering:
        return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á';
      case OrderStatus.completed:
        return '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô';
      case OrderStatus.cancelled:
        return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
    }
  }

  final _dateFmt = DateFormat('dd/MM/yyyy HH:mm'); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
  final _moneyFmt =
      NumberFormat.currency(locale: 'th_TH', symbol: '‡∏ø', decimalDigits: 0);

  @override
  Widget build(BuildContext context) {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      return const Center(child: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'));
    }

    final stream = OrderService.instance.watchMyOrders(user.uid);

    return Column(
      children: [
        const SizedBox(height: 8),

        // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        SizedBox(
          height: 44,
          child: ListView.separated(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 16),
            itemCount: filters.length,
            separatorBuilder: (_, __) => const SizedBox(width: 8),
            itemBuilder: (_, i) {
              final f = filters[i];
              final isSel = f == selected;
              return ChoiceChip(
                label: Text(f),
                selected: isSel,
                onSelected: (_) => setState(() => selected = f),
                labelStyle: const TextStyle(
                    color: Colors.black, fontWeight: FontWeight.w600),
                backgroundColor: Colors.white,
                selectedColor: Colors.white,
                side: BorderSide(
                    color: isSel ? Colors.green : Colors.grey.shade400,
                    width: isSel ? 2 : 1),
                shape: const StadiumBorder(),
                visualDensity: VisualDensity.compact,
              );
            },
          ),
        ),

        const Divider(height: 16),

        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        Expanded(
          child: StreamBuilder<List<OrderModel>>(
            stream: stream,
            builder: (context, snap) {
              if (snap.hasError) {
                final msg = '${snap.error}';
                // ‡∏ñ‡πâ‡∏≤ index ‡∏¢‡∏±‡∏á build ‡∏≠‡∏¢‡∏π‡πà ‡∏à‡∏∞‡πÑ‡∏î‡πâ failed-precondition ‚Üí ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á
                if (msg.contains('failed-precondition')) {
                  if (!_fallbackNoOrder) {
                    WidgetsBinding.instance.addPostFrameCallback((_) {
                      setState(() => _fallbackNoOrder = true);
                    });
                  }
                  return const Center(
                    child: Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏±‡∏ä‡∏ô‡∏µ‚Ä¶ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß'),
                  );
                }
                return Center(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $msg',
                        textAlign: TextAlign.center),
                  ),
                );
              }

              if (snap.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              }

              var orders = snap.data ?? [];

              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡πÑ‡∏°‡πà orderBy) ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡πÅ‡∏ó‡∏ô (‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤)
              if (_fallbackNoOrder) {
                orders = [...orders]
                  ..sort((a, b) => b.createdAt.compareTo(a.createdAt));
              }

              // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
              final list = (selected == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
                  ? orders
                  : orders
                      .where((o) => o.status == _thToStatus[selected]!)
                      .toList();

              if (list.isEmpty) {
                return const Center(
                    child: Text('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ'));
              }

              return ListView.builder(
                padding: const EdgeInsets.all(16),
                itemCount: list.length,
                itemBuilder: (_, i) {
                  final o = list[i];

                  return Card(
                    elevation: 0.5,
                    child: InkWell(
                      onTap: () {
                        Navigator.of(context).push(
                          MaterialPageRoute(
                              builder: (_) => OrderViewPage(orderId: o.id)),
                        );
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 12, vertical: 10),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(top: 4),
                              child: Icon(Icons.receipt_long),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                                  Row(
                                    children: [
                                      Expanded(
                                        child: Text('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${o.id}',
                                            style: const TextStyle(
                                                fontWeight: FontWeight.w600)),
                                      ),
                                      Text(_moneyFmt.format(o.grandTotal)),
                                    ],
                                  ),
                                  const SizedBox(height: 4),
                                  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                                  OrderStatusChip(_statusToTh(o.status)),
                                  const SizedBox(height: 4),
                                  // ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
                                  Text(
                                    '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${_dateFmt.format(o.createdAt)}',
                                    style:
                                        Theme.of(context).textTheme.bodySmall,
                                  ),
                                  const SizedBox(height: 8),

                                  // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                                  Row(
                                    children: [
                                      OutlinedButton.icon(
                                        onPressed: () {
                                          Navigator.of(context).push(
                                            MaterialPageRoute(
                                              builder: (_) =>
                                                  OrderViewPage(orderId: o.id),
                                            ),
                                          );
                                        },
                                        icon: const Icon(
                                            Icons.visibility_outlined,
                                            size: 18),
                                        label: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'),
                                      ),
                                      const SizedBox(width: 8),

                                      // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                                      if (o.status == OrderStatus.delivering)
                                        FilledButton.icon(
                                          onPressed: () {
                                            Navigator.push(
                                              context,
                                              MaterialPageRoute(
                                                builder: (_) =>
                                                    OrderTrackingMapOSM(
                                                        orderId: o.id),
                                              ),
                                            );
                                          },
                                          icon: const Icon(Icons.map_outlined,
                                              size: 18),
                                          label: const Text('‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°'),
                                        ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ],
    );
  }
}
